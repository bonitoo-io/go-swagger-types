openapi: "3.0.0"
info:
  title: Influx API Service
  version: 0.1.0
servers:
  - url: /api/v2
paths:
  /authorizations:
    get:
      operationId: GetAuthorizations
      tags:
        - Authorizations
      summary: List all authorizations
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: query
          name: userID
          schema:
            type: string
          description: Only show authorizations that belong to a user ID.
        - in: query
          name: user
          schema:
            type: string
          description: Only show authorizations that belong to a user name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Only show authorizations that belong to an organization ID.
        - in: query
          name: org
          schema:
            type: string
          description: Only show authorizations that belong to a organization name.
      responses:
        '200':
          description: A list of authorizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorizations"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostAuthorizations
      tags:
        - Authorizations
      summary: Create an authorization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        description: Authorization to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
      responses:
        '201':
          description: Authorization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /authorizations/{authID}:
    get:
      operationId: GetAuthorizationsID
      tags:
        - Authorizations
      summary: Retrieve an authorization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to get.
      responses:
        '200':
          description: Authorization details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchAuthorizationsID
      tags:
        - Authorizations
      summary: Update an authorization to be active or inactive
      requestBody:
        description: Authorization to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationUpdateRequest"
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to update.
      responses:
        '200':
          description: The active or inactie authorization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteAuthorizationsID
      tags:
        - Authorizations
      summary: Delete a authorization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to delete.
      responses:
        '204':
          description: Authorization deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /health:
    servers:
      - url: /
    get:
      operationId: GetHealth
      tags:
        - Health
      summary: Get the health of an instance
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      responses:
        '200':
          description: The instance is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        '503':
          description: The instance is unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  parameters:
    Offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
    Limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    Descending:
      in: query
      name: descending
      required: false
      schema:
        type: boolean
        default: false
    SortBy:
      in: query
      name: sortBy
      required: false
      schema:
        type: string
    TraceSpan:
      in: header
      name: Zap-Trace-Span
      description: OpenTracing span context
      example:
        trace_id: '1'
        span_id: '1'
        baggage:
          key: value
      required: false
      schema:
        type: string
  schemas:
    Permission:
      required: [action, resource]
      properties:
        action:
          type: string
          enum:
            - read
            - write
        resource:
          $ref: "#/components/schemas/Resource"
    AuthorizationUpdateRequest:
      properties:
        status:
          description: If inactive the token is inactive and requests using the token will be rejected.
          default: active
          type: string
          enum:
            - active
            - inactive
        description:
          type: string
          description: A description of the token.
    Authorization:
      required: [orgID, permissions]
      allOf:
        - $ref: "#/components/schemas/AuthorizationUpdateRequest"
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            orgID:
              type: string
              description: ID of org that authorization is scoped to.
            permissions:
              type: array
              minLength: 1
              description: List of permissions for an auth.  An auth must have at least one Permission.
              items:
                $ref: "#/components/schemas/Permission"
            id:
              readOnly: true
              type: string
            token:
              readOnly: true
              type: string
              description: Passed via the Authorization Header and Token Authentication type.
            userID:
              readOnly: true
              type: string
              description: ID of user that created and owns the token.
            user:
              readOnly: true
              type: string
              description: Name of user that created and owns the token.
            org:
              readOnly: true
              type: string
              description: Name of the org token is scoped to.
            links:
              type: object
              readOnly: true
              example:
                self: "/api/v2/authorizations/1"
                user: "/api/v2/users/12"
              properties:
                self:
                  readOnly: true
                  $ref: "#/components/schemas/Link"
                user:
                  readOnly: true
                  $ref: "#/components/schemas/Link"
    Authorizations:
      type: object
      properties:
        links:
          readOnly: true
          $ref: "#/components/schemas/Links"
        authorizations:
          type: array
          items:
            $ref: "#/components/schemas/Authorization" 
    Error:
      properties:
        code:
          description: Code is the machine-readable error code.
          readOnly: true
          type: string
          # This set of enumerations must remain in sync with the constants defined in errors.go
          enum:
            - internal error
            - not found
            - conflict
            - invalid
            - unprocessable entity
            - empty value
            - unavailable
            - forbidden
            - too many requests
            - unauthorized
            - method not allowed
        message:
          readOnly: true
          description: Message is a human-readable message.
          type: string
      required: [code, message]
    Link:
      type: string
      format: uri
      readOnly: true
      description: URI of resource.
    Links:
      type: object
      properties:
        next:
          $ref: "#/components/schemas/Link"
        self:
          $ref: "#/components/schemas/Link"
        prev:
          $ref: "#/components/schemas/Link"
      required: [self]
    Dialect:
      description: Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
      type: object
      properties:
        header:
          description: If true, the results will contain a header row
          type: boolean
          default: true
        delimiter:
          description: Separator between cells; the default is ,
          type: string
          default: ","
          maxLength: 1
          minLength: 1
        annotations:
          description: Https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns
          type: array
          items:
            type: string
            enum:
              - "group"
              - "datatype"
              - "default"
            uniqueItems: true
        commentPrefix:
          description: Character prefixed to comment strings
          type: string
          default: "#"
          maxLength: 1
          minLength: 0
        dateTimeFormat:
          description: Format of timestamps
          type: string
          default: "RFC3339"
          enum:
            - RFC3339
            - RFC3339Nano
    Resource:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum:
            - authorizations
            - buckets
            - dashboards
            - orgs
            - sources
            - tasks
            - telegrafs
            - users
            - variables
            - scrapers
            - secrets
            - labels
            - views
            - documents
            - notificationRules
            - notificationEndpoints
            - checks
        id:
          type: string
          nullable: true
          description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
        name:
          type: string
          nullable: true
          description: Optional name of the resource if the resource has a name field.
        orgID:
          type: string
          nullable: true
          description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
        org:
          type: string
          nullable: true
          description: Optional name of the organization of the organization with orgID.
    ThresholdBase:
      properties:
        level:
          $ref: "#/components/schemas/CheckStatusLevel"
        allValues:
          description: If true, only alert if all values meet threshold.
          type: boolean
    CheckStatusLevel:
      description: The state to record if check matches a criteria.
      type: string
      enum: ["UNKNOWN", "OK", "INFO", "CRIT", "WARN"]
    Pkg:
      type: array
      items:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
            enum:
              - Bucket
              - CheckDeadman
              - CheckThreshold
              - Dashboard
              - Label
              - NotificationEndpointHTTP
              - NotificationEndpointPagerDuty
              - NotificationEndpointSlack
              - NotificationRule
              - Task
              - Telegraf
              - Variable
          meta:
            type: object
            properties:
              name:
                type: string
          spec:
            type: object
    HealthCheck:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
        message:
          type: string
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"
        status:
          type: string
          enum:
            - pass
            - fail
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
